@inject IProductService ProductService
@implements IDisposable

<select>
    <option value="NameAsc" @onclick="() => SortBy(Sort.NameAsc)">По имени а-я</option>
    <option value="NameDesc" @onclick="() => SortBy(Sort.NameDesc)">По имени Я-А</option>
    <option value="PriceAsc" @onclick="() => SortBy(Sort.PriceAsc)">По цене от 0 до 1337</option>
    <option value="PriceDesc" @onclick="() => SortBy(Sort.PriceDesc)">По цене от -1 до 0</option>
</select>



<ul class="list-unstyled" style ="text-align: center;
                                  list-style-position: inside;">
    @foreach (Product product in ProductService.Products)
    {
        <li class="media my-3">
            <div class="justify-content-center">
                <a href="/product/@product.Id">
                    <img class="media-img" src="@product.Image" alt="@product.Title" style=" display: block;
                                                                                            margin-left: auto;
                                                                                            margin-right: auto;
                                                                                            "/>
                </a>
            </div>
            <div class="media-body">
                <a href="/product/@product.Id">
                    <h4 class="mb-0">@product.Title</h4>
                </a>
                <p>@GetDescription(product.Description)</p>
                <h5 class="price">
                    @GetPriceText(product)
                </h5>
            </div>
        </li>
    }
</ul>

@code {

    protected override void OnInitialized()
    {
        ProductService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        switch (variants.Count)
        {
            case 0:
                return string.Empty;
            case 1:
                return $"{variants[0].Price} руб.";
            default:
                {
                    decimal minPrice = variants.Min(v => v.Price);
                    return $"От {minPrice} руб.";
                }
        }
    }

    private string GetDescription(string description)
    {
        return description.Length > 50
            ? description[..50] + "..."
            : description;
    }

    private async Task SortBy(Sort sorting) => await ProductService.SortBy(sorting);

    /*

    <button class="dropdown-item" type="button" @onclick="() => SortBy(Sort.NameAsc)">По имени А-Я</button>
    <button class="dropdown-item" type="button" @onclick="() => SortBy(Sort.NameDesc)">По имени Я-А</button>
    <button class="dropdown-item" type="button" @onclick="() => SortBy(Sort.PriceAsc)">По цене от 0 до 1337</button>
    <button class="dropdown-item" type="button" @onclick="() => SortBy(Sort.PriceDesc)">По цене от -1 до 0</button>
    */
}

