@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService 
@inject ILocalStorageService LocalStorage
@inject IToastService ToastService 

<div class="views">
    <i class="oi oi-eye"></i> @GetViewString()
</div>
<div class="media">
    <div class="media-img-big-wrapper mr-2">
        <img class="media-img-big" src="@product.Image" alt="@product.Title" />
    </div>
    <div class="media-body">
        <h2 class="mb-0">@product.Title</h2>
        <p>@product.Description</p>
        @if (product.Variants != null && product.Variants.Count > 1)
        {
            <div class="form-group">
                <select class="form-control" @bind="currentEditionId">
                    @foreach (var variant in product.Variants)
                    {
                        <option value="@variant.EditionId">@variant.Edition.Name</option>
                    }
                </select>
            </div>
        }
        @if (GetSelectedVariant() != null)
        {
            @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
            {
                <h6 class="text-muted original-price">@GetSelectedVariant().OriginalPrice руб.</h6>
            }
            <h4 class="price">
                @GetSelectedVariant().Price руб.
            </h4>
        }
        <EditForm Model="cartItem">
            <div class="form-group">
                <InputNumber id="quantity" @bind-Value="cartItem.Quantity" class="form-control" style="width: 70px;" />
            </div>
        </EditForm>
        <button class="btn btn-primary" @onclick="AddToCart"><i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Купить</button>
    </div>

</div>

@code {
    private Product product = new();

    private int currentEditionId = 1;

    private CartItem cartItem = new() { Quantity = 1 };

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        product = await ProductService.GetProduct(Id);
        if (product.Variants.Count > 0)
        {
            currentEditionId = product.Variants[0].EditionId;
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        ProductVariant? variant = product.Variants.FirstOrDefault(v => v.EditionId == currentEditionId);
        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();

        cartItem.EditionId = productVariant.EditionId;
        cartItem.EditionName = productVariant.Edition.Name;
        cartItem.Image = product.Image;
        cartItem.Price = productVariant.Price;
        cartItem.ProductId = productVariant.ProductId;
        cartItem.ProductTitle = product.Title;

        await CartService.AddToCart(cartItem);
    }

    private string GetViewString()
    {
        return product.Views switch
        {
            > 1000000 => $"{((float)product.Views / 1000000):#.##}M",
            > 100000 => $"{((float)product.Views / 1000):#}K",
            _ => product.Views > 1000 ? $"{((float)product.Views / 1000):#.##}K" : product.Views.ToString("0##")
            };
    }
}
