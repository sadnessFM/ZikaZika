@page "/AddProduct"
@inject IProductService ProdService
@inject ICategoryService CategoryService
@inject NavigationManager Nigger

<h1>Add Product</h1>

<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="Id">id</label>
        <InputNumber id="Id" class="form-control" @bind-Value="@Model.Id" />
        <ValidationMessage For="@(() => Model.Id)" />
    </div>

    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="@Model.Title" />
        <ValidationMessage For="@(() => Model.Title)" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="@Model.Description" />
        <ValidationMessage For="@(() => Model.Description)" />
    </div>

    <div class="form-group">
        <label for="image">Image</label>
        <InputText id="image" class="form-control" @bind-Value="@Model.Image" />
        <ValidationMessage For="@(() => Model.Image)" />
    </div>

    <div class="form-group">
        <label for="categoryId">Category</label>
        <InputSelect id="categoryId" class="form-control" @bind-Value="@Model.CategoryId">
            @foreach (Category category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Model.CategoryId)" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    private Product Model = new();
    private List<Category> categories = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.LoadCategoriesNames();
    }

    private async Task HandleValidSubmit()
    {
        var product = new Product
            {
                Title = Model.Title,
                Description = Model.Description,
                Image = Model.Image,
                CategoryId = Model.CategoryId,
                DateCreated = DateTime.Now,
                Views = 0
            };

        await ProdService.AddProduct(product);

        Nigger.NavigateTo("/");
    }
}